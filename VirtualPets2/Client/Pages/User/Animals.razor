@page "/user/{userId:int}/animals"
@using VirtualPets2.Shared.Models
@using Microsoft.AspNetCore.Authorization
@inject HttpClient http
@attribute [Authorize]
@inject NavigationManager navigation

<h3>Your Animals</h3>
<a href=@("/user")>Go back to profile page</a>

@if (animals == null)
{
    <p><em>You don't have any animals :( </em></p>
    <a href=@($"animal")>You can buy a pet from here!</a>
}
else
{
     <div class="row">
         <div class="col mx-auto justify-content-between">
            @foreach (var animal in animals)
            {
                <div class="card">
                    <div class="card-body">
                        @foreach (var name in animalNames)
                        {
                            if (i < animalNames.Count())
                            {
                                <h3 class="card-title">@animalNames[i].Name.ToUpper()</h3>
                                i++;
                                break;
                            }
                            else
                            {
                                i = 0;
                            }
                        }
                        <h6>Title: @animal.Title</h6>
                        <h6>Type: @animal.Type</h6>
                        <h6>Dwelling: @animal.Dwelling</h6>
                        <h6>Diet: @animal.Diet</h6>
                    </div>
                    <a href="animal/{animalId}/name">Change your pet's name</a>
                    <button type="button" class="btn btn-primary btn-sm" @onclick="() => OpenFoodDialog(animal)">Feed</button>
                    <button type="button" class="btn btn-primary btn-sm" @onclick="() => OpenServiceDialog(animal)">Take Care of your Pet</button>
                </div>
            }
         </div>
         <a href=@("/user")>Go back to profile page</a>
     </div>

     if (FoodDialog)
     {
        <div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title">What would you like to feed your pet?</h4>
                        <button type="button" class="close" @onclick="() => OnFoodDialogClose(true)">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="container">
                            <EditForm Model="@AnimalFood" OnValidSubmit="@HandleSubmit">
                                <DataAnnotationsValidator />
                                <ValidationSummary />
                                <div class="form-group">
                                    <label>Food</label>
                                    <InputSelect class="form-control" @bind-Value="AnimalFood.FoodId">
                                        @foreach (var food in foods)
                                        {
                                            <option value="@food.Id">@food.Name</option>
                                        }
                                    </InputSelect>
                                </div>
                                <button type="submit" class="btn btn-primary btn-block mt-5">Submit</button>
                            </EditForm>
                        </div>
                    </div>
                    <div class="modal-footer">
                    </div>
                </div>
            </div>
        </div>
    }

    if (ServiceDialog)
    {
        <div class="col-md-3 mb-2">
            <h4>Choose from the following:</h4>
            <div class="container">
                <EditForm Model="@AnimalService" OnValidSubmit="@HandleServiceSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <label>Tasks</label>
                        <InputSelect class="form-control" @bind-Value="AnimalService.ServiceId">
                            @foreach (var service in services)
                            {
                                <option value="@service.Id">@service.Task</option>
                            }
                        </InputSelect>
                    </div>
                    <button type="submit" class="btn btn-primary btn-block mt-5">Submit</button>
                </EditForm>
            </div>
        </div>

        <Services></Services>
    }

    if (EatMeatDialog)
    {
       <FoodModal Title="Your pet loved that!"
           Text="You get $35!"
           OnClose="@OnDialogsClose">
       </FoodModal>
    }

     if (EatPlantsDialog)
     {
        <FoodModal Title="Your pet loved that!"
           Text="You get $15!"
           OnClose="@OnDialogsClose">
        </FoodModal>
     }

     if (EatDessertDialog)
     {
        <FoodModal Title="Your pet loved that!"
           Text="You get $50!"
           OnClose="@OnDialogsClose">
        </FoodModal>
     }

     if (NotPlantsDialog)
     {
        <FoodModal Title="Your pet did not like that!"
           Text="Minus $35!"
           OnClose="@OnDialogsClose">
        </FoodModal>
     }

     if (NotMeatDialog)
     {
        <FoodModal Title="Your pet did not like that!"
           Text="Minus $50!"
           OnClose="@OnDialogsClose">
        </FoodModal>
     }

     if (FailDialog)
     {
        <FoodModal Title="Sorry you can't feed your pet at this time!" 
            Text="Please try again later!" 
            OnClose="OnDialogsClose">
        </FoodModal>
     }

    if (Bath)
    {
        <FoodModal Title="Your pet had so much fun splishing and splashing with all the bubbles"
           Text="You get $45!"
           OnClose="@OnDialogsClose">
        </FoodModal>
    }
    if (Play)
    {
        <FoodModal Title="Your pet loved spending time with you!"
           Text=" You get $50!"
           OnClose="@OnDialogsClose">
        </FoodModal>
    }
    if (Groomers)
     {
        <FoodModal Title="Your pet was scared of the scissors, but is all nice and clean now!"
           Text="You get $15!"
           OnClose="@OnDialogsClose">
        </FoodModal>
     }
     if (Cuddle)
     {
        <FoodModal Title="Your pet loved being close to you!"
           Text="You get $30!"
           OnClose="@OnDialogsClose">
        </FoodModal>
     }
     if (Walk)
     {
        <FoodModal Title="Your pet loved prancing around in the great outdoors!"
           Text="You get $25!"
           OnClose="@OnDialogsClose">
        </FoodModal>
     }
     if (Park)
     {
        <FoodModal Title="Your pet loved meeting all of their friends at the park!"
           Text="You get $20!"
           OnClose="@OnDialogsClose">
        </FoodModal>
     }
     if (Playdate)
     {
        <FoodModal Title="Your pet loved meeting up and playing with their bestie!"
           Text="You get $35!"
           OnClose="@OnDialogsClose">
        </FoodModal>
     }
    if (Clothes)
    {
        <FoodModal Title="Your pet looks stylish in their new clothes, but they are itchy!"
           Text="You get $10!"
           OnClose="@OnDialogsClose">
        </FoodModal>
    }
    if (Pet)
    {
        <FoodModal Title="Your pet loves getting pet!"
           Text="You get $5!"
           OnClose="@OnDialogsClose">
        </FoodModal>
    }
     if (Treat)
     {
        <FoodModal Title="Your pet loves treats and wants some more!"
           Text="You get $40!"
           OnClose="@OnDialogsClose">
        </FoodModal>
     }
     if (Trick)
     {
        <FoodModal Title="Your pet loved learning that new trick, especially because of all the treats that they got!"
           Text="You get $55!"
           OnClose="@OnDialogsClose">
        </FoodModal>
     }
     if (Vet)
     {
        <FoodModal Title="Your pet was very scared to go the vet, but now they are happpy and healthy!"
           Text="You get $15!"
           OnClose="@OnDialogsClose">
        </FoodModal>
     }
     if (Spa)
     {
        <FoodModal Title="Your pet loves getting pampered!"
           Text="You get $30!"
           OnClose="@OnDialogsClose">
        </FoodModal>
     }
}

@code {
    [Parameter]
    public int userId { get; set; }
    int i = 0;

    public UserDetails user;
    public UserMoney userMoney = new();
    public AnimalUserDetails model = new();
    public AnimalFoodEdit AnimalFood = new();
    public AnimalServiceEdit AnimalService = new();
    public List<ServiceDetails> services { get; set; } = new List<ServiceDetails>();

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }

    private AnimalUserDetails _animaltoFeed;

    public List<AnimalUserDetails> animals { get; set; } = new List<AnimalUserDetails>();

    public List<AnimalEdit> animalNames { get; set; } = new List<AnimalEdit>();

    public List<FoodUserDetails> foods { get; set; } = new List<FoodUserDetails>();

    public FoodDetails _foodtoDelete;

    public bool FoodDialog { get; set; }
    public bool ServiceDialog { get; set; }
    public bool EatMeatDialog { get; set; }
    public bool EatPlantsDialog { get; set; }
    public bool EatDessertDialog { get; set; }
    public bool FailDialog { get; set; }
    public bool NotPlantsDialog { get; set; }
    public bool NotMeatDialog { get; set; }
    public bool Bath { get; set; }
    public bool Walk { get; set; }
    public bool Park { get; set; }
    public bool Play { get; set; }
    public bool Spa { get; set; }
    public bool Vet { get; set; }
    public bool Playdate { get; set; }
    public bool Groomers { get; set; }
    public bool Trick { get; set; }
    public bool Treat { get; set; }
    public bool Pet { get; set; }
    public bool Clothes { get; set; }
    public bool Cuddle { get; set; }

    private async Task OnFoodDialogClose(bool accepted)
    {
        FoodDialog = false;
        StateHasChanged();
    }

    private async Task OnDialogsClose(bool accepted)
    {
        EatMeatDialog = false;
        EatDessertDialog = false;
        EatPlantsDialog = false;
        FailDialog = false;
        NotPlantsDialog = false;
        NotMeatDialog = false;
        Bath = false;
        Walk = false;
        Park = false;
        Play = false;
        Spa = false;
        Vet = false;
        Playdate = false;
        Groomers = false;
        Trick = false;
        Treat = false;
        Pet = false;
        Clothes = false;
        Cuddle = false;
        StateHasChanged();
    }


    protected override async Task OnInitializedAsync()
    {
        animals = await http.GetFromJsonAsync<List<AnimalUserDetails>>($"/api/user/{userId}/animals");
        animalNames = await http.GetFromJsonAsync<List<AnimalEdit>>($"/api/animal/{userId}/names");
        foods = await http.GetFromJsonAsync<List<FoodUserDetails>>($"/api/user/{userId}/foods");
        user = await http.GetFromJsonAsync<UserDetails>("/api/user");
        services = await http.GetFromJsonAsync<List<ServiceDetails>>("/api/service");
    }

    private async Task OpenFoodDialog(AnimalUserDetails aniUser)
    {
        _animaltoFeed = aniUser;

        FoodDialog = true;
        StateHasChanged();
    }

    private async Task OpenServiceDialog(AnimalUserDetails aniUser)
    {
        _animaltoFeed = aniUser;

        ServiceDialog = true;
        StateHasChanged();
    }

    private async void HandleServiceSubmit()
    {
        ServiceDialog = false;
        StateHasChanged();

        var updated = await http.PutAsJsonAsync($"/api/animal/{_animaltoFeed.Id}/serviceId", AnimalService);
        if (updated.IsSuccessStatusCode)
        {
            int x = 0;
            var changed = await http.PutAsJsonAsync($"/api/service/{_animaltoFeed.Id}/user/{user.Id}", userMoney);
            if (changed.IsSuccessStatusCode)
            {
                var animalServiceId = await http.GetFromJsonAsync<AnimalServiceEdit>($"/api/service/{_animaltoFeed.Id}");
                x = 4;
                if (x == 4)
                {
                    if (animalServiceId.ServiceId == 1)
                    {
                        Bath = true;
                        StateHasChanged();
                    }
                    else if (animalServiceId.ServiceId == 2)
                    {
                        Play = true;
                        StateHasChanged();
                    }
                    else if (animalServiceId.ServiceId == 3)
                    {
                        Groomers = true;
                        StateHasChanged();
                    }
                    else if (animalServiceId.ServiceId == 4)
                    {
                        Cuddle = true;
                        StateHasChanged();
                    }
                    else if (animalServiceId.ServiceId == 5)
                    {
                        Walk = true;
                        StateHasChanged();
                    }
                    else if (animalServiceId.ServiceId == 6)
                    {
                        Park = true;
                        StateHasChanged();
                    }
                    else if (animalServiceId.ServiceId == 7)
                    {
                        Playdate = true;
                        StateHasChanged();
                    }
                    else if (animalServiceId.ServiceId == 8)
                    {
                        Clothes = true;
                        StateHasChanged();
                    }
                    else if (animalServiceId.ServiceId == 9)
                    {
                        Pet = true;
                        StateHasChanged();
                    }
                    else if (animalServiceId.ServiceId == 10)
                    {
                        Treat = true;
                        StateHasChanged();
                    }
                    else if (animalServiceId.ServiceId == 11)
                    {
                        Trick = true;
                        StateHasChanged();
                    }
                    else if (animalServiceId.ServiceId == 12)
                    {
                        Vet = true;
                        StateHasChanged();
                    }
                    else if (animalServiceId.ServiceId == 13)
                    {
                        Spa = true;
                        StateHasChanged();
                    }
                }
            }
        }

    }
    private async void HandleSubmit()
    {
        FoodDialog = false;
        StateHasChanged();

        var updated = await http.PutAsJsonAsync($"/api/animal/{_animaltoFeed.Id}/foodId", AnimalFood);
        if (updated.IsSuccessStatusCode)
        {
            int j = 0;
            var _foodtoDelete = await http.GetFromJsonAsync<FoodDetails>($"/api/food/{_animaltoFeed.Id}/details");
            j = 2;

            if (j == 2)
            {
                if (_foodtoDelete.Type == Kind.Meat && _animaltoFeed.Diet == Food.Carnivore)
                {
                    var moneyChanged = await http.PutAsJsonAsync($"/api/animal/{user.Id}/meat", userMoney);

                    if (moneyChanged.IsSuccessStatusCode)
                    {
                        var deleteRes = await http.DeleteAsync($"/api/user/{_animaltoFeed.Id}");

                        if (deleteRes.IsSuccessStatusCode)
                        {
                            EatMeatDialog = true;
                            StateHasChanged();
                        }
                        else
                        {
                            FoodDialog = false;
                            navigation.NavigateTo($"/user/{user.Id}/animals");
                            FailDialog = true;
                        }
                    }
                }
                else if (_foodtoDelete.Type == Kind.Plants && _animaltoFeed.Diet == Food.Herbivore)
                {
                    var money = await http.PutAsJsonAsync($"/api/animal/{user.Id}/plants", userMoney);

                    if (money.IsSuccessStatusCode)
                    {
                        var deleteRes = await http.DeleteAsync($"/api/user/{_animaltoFeed.Id}");

                        if (deleteRes.IsSuccessStatusCode)
                        {
                            EatPlantsDialog = true;
                            StateHasChanged();
                        }
                        else
                        {
                            FoodDialog = false;
                            navigation.NavigateTo($"/user/{user.Id}/animals");
                            FailDialog = true;
                        }
                    }
                }
                else if (_foodtoDelete.Type == Kind.Meat && _animaltoFeed.Diet == Food.Herbivore)
                {
                    var moneyLost = await http.PutAsJsonAsync($"/api/animal/{user.Id}/Notplants", userMoney);

                    if (moneyLost.IsSuccessStatusCode)
                    {
                        var deleteRes = await http.DeleteAsync($"/api/user/{_animaltoFeed.Id}");

                        if (deleteRes.IsSuccessStatusCode)
                        {
                            NotPlantsDialog = true;
                            StateHasChanged();
                        }
                        else
                        {
                            FoodDialog = false;
                            navigation.NavigateTo($"/user/{user.Id}/animals");
                            FailDialog = true;
                        }
                    }
                }
                else if (_foodtoDelete.Type == Kind.Plants && _animaltoFeed.Diet == Food.Carnivore)
                {
                    var LoseMoney = await http.PutAsJsonAsync($"/api/animal/{user.Id}/Notmeat", userMoney);

                    if (LoseMoney.IsSuccessStatusCode)
                    {
                        var deleteRes = await http.DeleteAsync($"/api/user/{_animaltoFeed.Id}");

                        if (deleteRes.IsSuccessStatusCode)
                        {
                            NotMeatDialog = true;
                            StateHasChanged();
                        }
                        else
                        {
                            FoodDialog = false;
                            navigation.NavigateTo($"/user/{user.Id}/animals");
                            FailDialog = true;
                        }
                    }
                }
                else if (_foodtoDelete.Type == Kind.Dessert)
                {
                    var moreMoney = await http.PutAsJsonAsync($"/api/animal/{user.Id}/dessert", userMoney);

                    if (moreMoney.IsSuccessStatusCode)
                    {
                        var deleteRes = await http.DeleteAsync($"/api/user/{_animaltoFeed.Id}");

                        if (deleteRes.IsSuccessStatusCode)
                        {
                            EatDessertDialog = true;
                            StateHasChanged();
                        }
                        else
                        {
                            FoodDialog = false;
                            navigation.NavigateTo($"/user/{user.Id}/animals");
                            FailDialog = true;
                        }
                    }
                }
            }
        }
        else 
        {
            FoodDialog = false;
            navigation.NavigateTo($"/user/{user.Id}/animals");
            FailDialog = true;
        }
    }
    
    //    else if (_foodtoDelete.Type == Kind.Plants && _animaltoFeed.Diet == Food.Herbivore)
    //    {
    //        var updated = await http.PutAsJsonAsync($"/api/animal/{user.Id}/plants", userMoney);

    //        if (updated.IsSuccessStatusCode)
    //        {
    //            var deleteRes = await http.DeleteAsync($"/api/food/{foodId}");

    //            if (deleteRes.IsSuccessStatusCode)
    //            {
    //                EatPlantsDialog = true;
    //            }
    //        }
    //        else
    //        {
    //            FailDialog = true;
    //        }
    //    }
    //    else if (_foodtoDelete.Type == Kind.Dessert)
    //    {
    //        var updated = await http.PutAsJsonAsync($"/api/animal/{user.Id}/dessert", userMoney);

    //        if (updated.IsSuccessStatusCode)
    //        {
    //            var deleteRes = await http.DeleteAsync($"/api/food/{foodId}");

    //            if (deleteRes.IsSuccessStatusCode)
    //            {
    //                EatDessertDialog = true;
    //            }
    //        }
    //        else
    //        {
    //            FailDialog = true;
    //        }
    //    }

    //}
}



